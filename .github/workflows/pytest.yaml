name: Python package

on:
  workflow_dispatch:
  push:
    branches: ["main", "rc-*"]
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10", "3.11"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip, install wheel
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: Install dev version of htmltools
        run: |
          pip install https://github.com/rstudio/py-htmltools/tarball/main

      - name: Install dependencies
        run: |
          pip install -e ".[dev,test]"

      - name: Install
        run: |
          make install
      #- name: Run unit tests
      #  run: |
      #    make test
      # - name: pyright, flake8, black and isort
      #   run: |
      #     make check

  deploy:
    name: "Deploy to PyPI"
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: "Set up Python 3.8"
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      - name: "Build Package"
        run: |
          make dist

      # test deploy ----
      - name: "Test Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.event.release.name, 'TEST')
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      ## prod deploy ----
      - name: "Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@master
        if: startsWith(github.event.release.name, 'shinywidgets')
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
